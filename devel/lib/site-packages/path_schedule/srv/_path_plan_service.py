# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from path_schedule/path_plan_serviceRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class path_plan_serviceRequest(genpy.Message):
  _md5sum = "651400191eda9b36413bede9fc8fdea4"
  _type = "path_schedule/path_plan_serviceRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id
int32 cur_x
int32 cur_y
int32 cur_theta
int32 goal_x
int32 goal_y
int32 goal_theta
"""
  __slots__ = ['id','cur_x','cur_y','cur_theta','goal_x','goal_y','goal_theta']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,cur_x,cur_y,cur_theta,goal_x,goal_y,goal_theta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(path_plan_serviceRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.cur_x is None:
        self.cur_x = 0
      if self.cur_y is None:
        self.cur_y = 0
      if self.cur_theta is None:
        self.cur_theta = 0
      if self.goal_x is None:
        self.goal_x = 0
      if self.goal_y is None:
        self.goal_y = 0
      if self.goal_theta is None:
        self.goal_theta = 0
    else:
      self.id = 0
      self.cur_x = 0
      self.cur_y = 0
      self.cur_theta = 0
      self.goal_x = 0
      self.goal_y = 0
      self.goal_theta = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.id, _x.cur_x, _x.cur_y, _x.cur_theta, _x.goal_x, _x.goal_y, _x.goal_theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.cur_x, _x.cur_y, _x.cur_theta, _x.goal_x, _x.goal_y, _x.goal_theta,) = _get_struct_7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.id, _x.cur_x, _x.cur_y, _x.cur_theta, _x.goal_x, _x.goal_y, _x.goal_theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.cur_x, _x.cur_y, _x.cur_theta, _x.goal_x, _x.goal_y, _x.goal_theta,) = _get_struct_7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7i = None
def _get_struct_7i():
    global _struct_7i
    if _struct_7i is None:
        _struct_7i = struct.Struct("<7i")
    return _struct_7i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from path_schedule/path_plan_serviceResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class path_plan_serviceResponse(genpy.Message):
  _md5sum = "81217a34334aaaa534d6087199e767e4"
  _type = "path_schedule/path_plan_serviceResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string path
string path_y
int32 path_node_num
int32 agent_id
"""
  __slots__ = ['path','path_y','path_node_num','agent_id']
  _slot_types = ['string','string','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path,path_y,path_node_num,agent_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(path_plan_serviceResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.path is None:
        self.path = ''
      if self.path_y is None:
        self.path_y = ''
      if self.path_node_num is None:
        self.path_node_num = 0
      if self.agent_id is None:
        self.agent_id = 0
    else:
      self.path = ''
      self.path_y = ''
      self.path_node_num = 0
      self.agent_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.path_y
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.path_node_num, _x.agent_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_y = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path_y = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.path_node_num, _x.agent_id,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.path_y
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.path_node_num, _x.agent_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_y = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path_y = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.path_node_num, _x.agent_id,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
class path_plan_service(object):
  _type          = 'path_schedule/path_plan_service'
  _md5sum = 'a492be626b9e9035dc3f45a07b0259c0'
  _request_class  = path_plan_serviceRequest
  _response_class = path_plan_serviceResponse
