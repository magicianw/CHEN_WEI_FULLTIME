// Generated by gencpp from file path_schedule/path_plan_serviceRequest.msg
// DO NOT EDIT!


#ifndef PATH_SCHEDULE_MESSAGE_PATH_PLAN_SERVICEREQUEST_H
#define PATH_SCHEDULE_MESSAGE_PATH_PLAN_SERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_schedule
{
template <class ContainerAllocator>
struct path_plan_serviceRequest_
{
  typedef path_plan_serviceRequest_<ContainerAllocator> Type;

  path_plan_serviceRequest_()
    : id(0)
    , cur_x(0)
    , cur_y(0)
    , cur_theta(0)
    , goal_x(0)
    , goal_y(0)
    , goal_theta(0)  {
    }
  path_plan_serviceRequest_(const ContainerAllocator& _alloc)
    : id(0)
    , cur_x(0)
    , cur_y(0)
    , cur_theta(0)
    , goal_x(0)
    , goal_y(0)
    , goal_theta(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _cur_x_type;
  _cur_x_type cur_x;

   typedef int32_t _cur_y_type;
  _cur_y_type cur_y;

   typedef int32_t _cur_theta_type;
  _cur_theta_type cur_theta;

   typedef int32_t _goal_x_type;
  _goal_x_type goal_x;

   typedef int32_t _goal_y_type;
  _goal_y_type goal_y;

   typedef int32_t _goal_theta_type;
  _goal_theta_type goal_theta;





  typedef boost::shared_ptr< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct path_plan_serviceRequest_

typedef ::path_schedule::path_plan_serviceRequest_<std::allocator<void> > path_plan_serviceRequest;

typedef boost::shared_ptr< ::path_schedule::path_plan_serviceRequest > path_plan_serviceRequestPtr;
typedef boost::shared_ptr< ::path_schedule::path_plan_serviceRequest const> path_plan_serviceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::path_schedule::path_plan_serviceRequest_<ContainerAllocator1> & lhs, const ::path_schedule::path_plan_serviceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.cur_x == rhs.cur_x &&
    lhs.cur_y == rhs.cur_y &&
    lhs.cur_theta == rhs.cur_theta &&
    lhs.goal_x == rhs.goal_x &&
    lhs.goal_y == rhs.goal_y &&
    lhs.goal_theta == rhs.goal_theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::path_schedule::path_plan_serviceRequest_<ContainerAllocator1> & lhs, const ::path_schedule::path_plan_serviceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace path_schedule

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "651400191eda9b36413bede9fc8fdea4";
  }

  static const char* value(const ::path_schedule::path_plan_serviceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x651400191eda9b36ULL;
  static const uint64_t static_value2 = 0x413bede9fc8fdea4ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_schedule/path_plan_serviceRequest";
  }

  static const char* value(const ::path_schedule::path_plan_serviceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"int32 cur_x\n"
"int32 cur_y\n"
"int32 cur_theta\n"
"int32 goal_x\n"
"int32 goal_y\n"
"int32 goal_theta\n"
;
  }

  static const char* value(const ::path_schedule::path_plan_serviceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.cur_x);
      stream.next(m.cur_y);
      stream.next(m.cur_theta);
      stream.next(m.goal_x);
      stream.next(m.goal_y);
      stream.next(m.goal_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct path_plan_serviceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_schedule::path_plan_serviceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_schedule::path_plan_serviceRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "cur_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cur_x);
    s << indent << "cur_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cur_y);
    s << indent << "cur_theta: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cur_theta);
    s << indent << "goal_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_x);
    s << indent << "goal_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_y);
    s << indent << "goal_theta: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_SCHEDULE_MESSAGE_PATH_PLAN_SERVICEREQUEST_H
