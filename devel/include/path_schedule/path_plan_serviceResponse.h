// Generated by gencpp from file path_schedule/path_plan_serviceResponse.msg
// DO NOT EDIT!


#ifndef PATH_SCHEDULE_MESSAGE_PATH_PLAN_SERVICERESPONSE_H
#define PATH_SCHEDULE_MESSAGE_PATH_PLAN_SERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_schedule
{
template <class ContainerAllocator>
struct path_plan_serviceResponse_
{
  typedef path_plan_serviceResponse_<ContainerAllocator> Type;

  path_plan_serviceResponse_()
    : path()
    , path_y()
    , path_node_num(0)
    , agent_id(0)  {
    }
  path_plan_serviceResponse_(const ContainerAllocator& _alloc)
    : path(_alloc)
    , path_y(_alloc)
    , path_node_num(0)
    , agent_id(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _path_type;
  _path_type path;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _path_y_type;
  _path_y_type path_y;

   typedef int32_t _path_node_num_type;
  _path_node_num_type path_node_num;

   typedef int32_t _agent_id_type;
  _agent_id_type agent_id;





  typedef boost::shared_ptr< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct path_plan_serviceResponse_

typedef ::path_schedule::path_plan_serviceResponse_<std::allocator<void> > path_plan_serviceResponse;

typedef boost::shared_ptr< ::path_schedule::path_plan_serviceResponse > path_plan_serviceResponsePtr;
typedef boost::shared_ptr< ::path_schedule::path_plan_serviceResponse const> path_plan_serviceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::path_schedule::path_plan_serviceResponse_<ContainerAllocator1> & lhs, const ::path_schedule::path_plan_serviceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.path == rhs.path &&
    lhs.path_y == rhs.path_y &&
    lhs.path_node_num == rhs.path_node_num &&
    lhs.agent_id == rhs.agent_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::path_schedule::path_plan_serviceResponse_<ContainerAllocator1> & lhs, const ::path_schedule::path_plan_serviceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace path_schedule

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81217a34334aaaa534d6087199e767e4";
  }

  static const char* value(const ::path_schedule::path_plan_serviceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81217a34334aaaa5ULL;
  static const uint64_t static_value2 = 0x34d6087199e767e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_schedule/path_plan_serviceResponse";
  }

  static const char* value(const ::path_schedule::path_plan_serviceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string path\n"
"string path_y\n"
"int32 path_node_num\n"
"int32 agent_id\n"
;
  }

  static const char* value(const ::path_schedule::path_plan_serviceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path);
      stream.next(m.path_y);
      stream.next(m.path_node_num);
      stream.next(m.agent_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct path_plan_serviceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_schedule::path_plan_serviceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_schedule::path_plan_serviceResponse_<ContainerAllocator>& v)
  {
    s << indent << "path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.path);
    s << indent << "path_y: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.path_y);
    s << indent << "path_node_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.path_node_num);
    s << indent << "agent_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.agent_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_SCHEDULE_MESSAGE_PATH_PLAN_SERVICERESPONSE_H
