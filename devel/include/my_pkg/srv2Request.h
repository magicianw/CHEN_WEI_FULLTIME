// Generated by gencpp from file my_pkg/srv2Request.msg
// DO NOT EDIT!


#ifndef MY_PKG_MESSAGE_SRV2REQUEST_H
#define MY_PKG_MESSAGE_SRV2REQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_pkg
{
template <class ContainerAllocator>
struct srv2Request_
{
  typedef srv2Request_<ContainerAllocator> Type;

  srv2Request_()
    : A(0)
    , B(0)
    , C(0)  {
    }
  srv2Request_(const ContainerAllocator& _alloc)
    : A(0)
    , B(0)
    , C(0)  {
  (void)_alloc;
    }



   typedef int32_t _A_type;
  _A_type A;

   typedef int32_t _B_type;
  _B_type B;

   typedef int32_t _C_type;
  _C_type C;





  typedef boost::shared_ptr< ::my_pkg::srv2Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_pkg::srv2Request_<ContainerAllocator> const> ConstPtr;

}; // struct srv2Request_

typedef ::my_pkg::srv2Request_<std::allocator<void> > srv2Request;

typedef boost::shared_ptr< ::my_pkg::srv2Request > srv2RequestPtr;
typedef boost::shared_ptr< ::my_pkg::srv2Request const> srv2RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_pkg::srv2Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_pkg::srv2Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_pkg::srv2Request_<ContainerAllocator1> & lhs, const ::my_pkg::srv2Request_<ContainerAllocator2> & rhs)
{
  return lhs.A == rhs.A &&
    lhs.B == rhs.B &&
    lhs.C == rhs.C;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_pkg::srv2Request_<ContainerAllocator1> & lhs, const ::my_pkg::srv2Request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_pkg::srv2Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_pkg::srv2Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_pkg::srv2Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_pkg::srv2Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_pkg::srv2Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_pkg::srv2Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_pkg::srv2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e7a68ce4e0b75a9719b4950a7069c9d4";
  }

  static const char* value(const ::my_pkg::srv2Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe7a68ce4e0b75a97ULL;
  static const uint64_t static_value2 = 0x19b4950a7069c9d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_pkg::srv2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_pkg/srv2Request";
  }

  static const char* value(const ::my_pkg::srv2Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_pkg::srv2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 A\n"
"int32 B\n"
"int32 C\n"
;
  }

  static const char* value(const ::my_pkg::srv2Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_pkg::srv2Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.A);
      stream.next(m.B);
      stream.next(m.C);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srv2Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_pkg::srv2Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_pkg::srv2Request_<ContainerAllocator>& v)
  {
    s << indent << "A: ";
    Printer<int32_t>::stream(s, indent + "  ", v.A);
    s << indent << "B: ";
    Printer<int32_t>::stream(s, indent + "  ", v.B);
    s << indent << "C: ";
    Printer<int32_t>::stream(s, indent + "  ", v.C);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PKG_MESSAGE_SRV2REQUEST_H
